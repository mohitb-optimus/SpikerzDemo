name: Playwright Tests (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Build Docker image using your Dockerfile
      - name: Build Docker image
        run: docker build -t playwright-tests .

      # Run Playwright tests inside container
      - name: Run Playwright tests in Docker
        run: |
          docker run --rm \
            -e DEMO_USERNAME=${{ secrets.DEMO_USERNAME }} \
            -e DEMO_PASSWORD=${{ secrets.DEMO_PASSWORD }} \
            -e GMAIL_USER=${{ secrets.GMAIL_USER }} \
            -e GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }} \
            -e DEMO_URL=${{ secrets.DEMO_URL }} \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            -v ${{ github.workspace }}/allure-results:/app/allure-results \
            -v ${{ github.workspace }}/allure-report:/app/allure-report \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            playwright-tests

      # Upload Playwright HTML report (artifact)
      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report
          path: playwright-report

      # Upload Playwright traces separately
      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/**/trace.zip
          if-no-files-found: ignore

      # Upload Allure results
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # Generate Allure report
      - name: Generate Allure report
        if: always()
        run: |
          npm install -g allure-commandline --save-dev
          allure generate allure-results --clean -o allure-report || echo "No allure results to generate"

      # Upload Allure HTML report
      - name: Upload Allure HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: allure-report

      # Deploy Allure report to GitHub Pages
      - name: Deploy Allure report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          force_orphan: true

      # Add results summary
      - name: Add test results to summary
        if: always()
        run: |
          PASSED=$(jq '[.suites[].specs[].tests[] | select(.results[].status=="passed")] | length' test-results/test-results.json)
          FAILED=$(jq '[.suites[].specs[].tests[] | select(.results[].status=="failed")] | length' test-results/test-results.json)
          SKIPPED=$(jq '[.suites[].specs[].tests[] | select(.results[].status=="skipped")] | length' test-results/test-results.json)

          echo "## 📊 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Allure Report Published" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Open Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
